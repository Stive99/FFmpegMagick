# В этом рабочем процессе используются действия, не сертифицированные GitHub.
# Они предоставляются третьей стороной и регулируются
# отдельными условиями обслуживания, политикой конфиденциальности и вспомогательной
# документация.

# Этот рабочий процесс позволяет собрать, протестировать, подписать и упаковать настольное приложение WPF или Windows Forms.
# построенное на .NET Core.
# Чтобы узнать, как перенести существующее приложение на .NET Core,
# см. https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# Для настройки этого рабочего процесса:
#
# 1. Настройка переменных окружения
# GitHub устанавливает переменные окружения по умолчанию для каждого запуска рабочего процесса.
# Замените переменные относительно вашего проекта в разделе "env" ниже.
#
# 2. Подписание
# Сгенерируйте сертификат подписи в приложении Windows.
# Packaging Project или добавьте существующий сертификат подписи в проект.
# Далее с помощью PowerShell закодируйте файл .pfx с использованием кодировки Base64.
# запустив следующий сценарий Powershell для создания выходной строки:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Откройте выходной файл SigningCertificate_Encoded.txt и скопируйте в него строку
# строку внутрь. Затем добавьте строку в репозиторий как секрет GitHub
# и назовите ее "Base64_Encoded_Pfx".
# Для получения дополнительной информации о том, как настроить сертификат подписи для
# этого рабочего процесса, см. https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Наконец, добавьте пароль сертификата подписи в репозиторий как секрет и назовите его "Pfx_Key".
# См. раздел "Сборка проекта упаковки Windows-приложений" ниже, чтобы увидеть, как используется секрет.
#
# Для получения дополнительной информации о действиях GitHub Actions см. https://github.com/features/actions.
# Полный пример CI/CD для начала работы с рабочими процессами GitHub Action для настольных приложений,
# см. https://github.com/microsoft/github-actions-for-desktop-apps



name: .NET Core Desktop

on:
	push:
		branches: [ "main" ]
	pull_request:
		branches: [ "main" ]

jobs:

	build:

		strategy:
			matrix:
				configuration: [Debug, Release]

		runs-on: windows-latest  # Список доступных типов бегунов см. в разделе
														 # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

		env:
			Solution_Name: FFmpegMagick.sln														# Замените на имя вашего решения, например, MyWpfApp.sln.
			Test_Project_Path: your-test-project-path									# Замените на путь к вашему тестовому проекту, т.е. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
			Wap_Project_Directory: your-wap-project-directory-name		# Заменить на каталог Wap-проекта относительно решения, т.е. MyWpfApp.Package.
			Wap_Project_Path: your-wap-project-path										# Замените на путь к вашему Wap-проекту, т.е. MyWpf.App.Package\MyWpfApp.Package.wapproj.

		steps:
		- name: Checkout
			uses: actions/checkout@v3
			with:
				fetch-depth: 0

		# Установите рабочую нагрузку .NET Core
		- name: Install .NET Core
			uses: actions/setup-dotnet@v3
			with:
				dotnet-version: 8.0.x

		# Добавьте MSBuild в PATH: https://github.com/microsoft/setup-msbuild
		- name: Setup MSBuild.exe
			uses: microsoft/setup-msbuild@v1.0.2

		# Выполнение всех модульных тестов в решении
		- name: Execute unit tests
			run: dotnet test

		# Восстановите приложение, чтобы заполнить папку obj идентификаторами времени выполнения (RuntimeIdentifiers)
		- name: Restore the application
			run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
			env:
				Configuration: ${{ matrix.configuration }}

		# Декодировать pfx в кодировке base 64 и сохранить Signing_Certificate
		- name: Decode the pfx
			run: |
				$pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
				$certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
				[IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

		# Создание пакета приложений путем сборки и упаковки проекта Windows Application Packaging
		- name: Create the app package
			run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
			env:
				Appx_Bundle: Always
				Appx_Bundle_Platforms: x86|x64
				Appx_Package_Build_Mode: StoreUpload
				Configuration: ${{ matrix.configuration }}

		# Удалить pfx
		- name: Remove the pfx
			run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

		# Загрузите пакет MSIX: https://github.com/marketplace/actions/upload-a-build-artifact
		- name: Upload build artifacts
			uses: actions/upload-artifact@v3
			with:
				name: MSIX Package
				path: ${{ env.Wap_Project_Directory }}\AppPackages
